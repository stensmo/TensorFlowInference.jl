# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-03-03T12:31:44.059

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export ReaderBaseState

struct ReaderBaseState
    work_started::Int64
    work_finished::Int64
    num_records_produced::Int64
    current_work::Vector{UInt8}
end
PB.default_values(::Type{ReaderBaseState}) = (;work_started = zero(Int64), work_finished = zero(Int64), num_records_produced = zero(Int64), current_work = UInt8[])
PB.field_numbers(::Type{ReaderBaseState}) = (;work_started = 1, work_finished = 2, num_records_produced = 3, current_work = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:ReaderBaseState})
    work_started = zero(Int64)
    work_finished = zero(Int64)
    num_records_produced = zero(Int64)
    current_work = UInt8[]
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            work_started = PB.decode(d, Int64)
        elseif field_number == 2
            work_finished = PB.decode(d, Int64)
        elseif field_number == 3
            num_records_produced = PB.decode(d, Int64)
        elseif field_number == 4
            current_work = PB.decode(d, Vector{UInt8})
        else
            PB.skip(d, wire_type)
        end
    end
    return ReaderBaseState(work_started, work_finished, num_records_produced, current_work)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::ReaderBaseState)
    initpos = position(e.io)
    x.work_started != zero(Int64) && PB.encode(e, 1, x.work_started)
    x.work_finished != zero(Int64) && PB.encode(e, 2, x.work_finished)
    x.num_records_produced != zero(Int64) && PB.encode(e, 3, x.num_records_produced)
    !isempty(x.current_work) && PB.encode(e, 4, x.current_work)
    return position(e.io) - initpos
end
function PB._encoded_size(x::ReaderBaseState)
    encoded_size = 0
    x.work_started != zero(Int64) && (encoded_size += PB._encoded_size(x.work_started, 1))
    x.work_finished != zero(Int64) && (encoded_size += PB._encoded_size(x.work_finished, 2))
    x.num_records_produced != zero(Int64) && (encoded_size += PB._encoded_size(x.num_records_produced, 3))
    !isempty(x.current_work) && (encoded_size += PB._encoded_size(x.current_work, 4))
    return encoded_size
end
