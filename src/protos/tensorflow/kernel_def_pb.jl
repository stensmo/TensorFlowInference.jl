# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-03-03T12:31:44.012

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export var"KernelDef.AttrConstraint", KernelDef, KernelList

struct var"KernelDef.AttrConstraint"
    name::String
    allowed_values::Union{Nothing,AttrValue}
end
PB.default_values(::Type{var"KernelDef.AttrConstraint"}) = (;name = "", allowed_values = nothing)
PB.field_numbers(::Type{var"KernelDef.AttrConstraint"}) = (;name = 1, allowed_values = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:var"KernelDef.AttrConstraint"})
    name = ""
    allowed_values = Ref{Union{Nothing,AttrValue}}(nothing)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            name = PB.decode(d, String)
        elseif field_number == 2
            PB.decode!(d, allowed_values)
        else
            PB.skip(d, wire_type)
        end
    end
    return var"KernelDef.AttrConstraint"(name, allowed_values[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::var"KernelDef.AttrConstraint")
    initpos = position(e.io)
    !isempty(x.name) && PB.encode(e, 1, x.name)
    !isnothing(x.allowed_values) && PB.encode(e, 2, x.allowed_values)
    return position(e.io) - initpos
end
function PB._encoded_size(x::var"KernelDef.AttrConstraint")
    encoded_size = 0
    !isempty(x.name) && (encoded_size += PB._encoded_size(x.name, 1))
    !isnothing(x.allowed_values) && (encoded_size += PB._encoded_size(x.allowed_values, 2))
    return encoded_size
end

struct KernelDef
    op::String
    device_type::String
    constraint::Vector{var"KernelDef.AttrConstraint"}
    host_memory_arg::Vector{String}
    label::String
    priority::Int32
end
PB.default_values(::Type{KernelDef}) = (;op = "", device_type = "", constraint = Vector{var"KernelDef.AttrConstraint"}(), host_memory_arg = Vector{String}(), label = "", priority = zero(Int32))
PB.field_numbers(::Type{KernelDef}) = (;op = 1, device_type = 2, constraint = 3, host_memory_arg = 4, label = 5, priority = 6)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:KernelDef})
    op = ""
    device_type = ""
    constraint = PB.BufferedVector{var"KernelDef.AttrConstraint"}()
    host_memory_arg = PB.BufferedVector{String}()
    label = ""
    priority = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            op = PB.decode(d, String)
        elseif field_number == 2
            device_type = PB.decode(d, String)
        elseif field_number == 3
            PB.decode!(d, constraint)
        elseif field_number == 4
            PB.decode!(d, host_memory_arg)
        elseif field_number == 5
            label = PB.decode(d, String)
        elseif field_number == 6
            priority = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return KernelDef(op, device_type, constraint[], host_memory_arg[], label, priority)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::KernelDef)
    initpos = position(e.io)
    !isempty(x.op) && PB.encode(e, 1, x.op)
    !isempty(x.device_type) && PB.encode(e, 2, x.device_type)
    !isempty(x.constraint) && PB.encode(e, 3, x.constraint)
    !isempty(x.host_memory_arg) && PB.encode(e, 4, x.host_memory_arg)
    !isempty(x.label) && PB.encode(e, 5, x.label)
    x.priority != zero(Int32) && PB.encode(e, 6, x.priority)
    return position(e.io) - initpos
end
function PB._encoded_size(x::KernelDef)
    encoded_size = 0
    !isempty(x.op) && (encoded_size += PB._encoded_size(x.op, 1))
    !isempty(x.device_type) && (encoded_size += PB._encoded_size(x.device_type, 2))
    !isempty(x.constraint) && (encoded_size += PB._encoded_size(x.constraint, 3))
    !isempty(x.host_memory_arg) && (encoded_size += PB._encoded_size(x.host_memory_arg, 4))
    !isempty(x.label) && (encoded_size += PB._encoded_size(x.label, 5))
    x.priority != zero(Int32) && (encoded_size += PB._encoded_size(x.priority, 6))
    return encoded_size
end

struct KernelList
    kernel::Vector{KernelDef}
end
PB.default_values(::Type{KernelList}) = (;kernel = Vector{KernelDef}())
PB.field_numbers(::Type{KernelList}) = (;kernel = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:KernelList})
    kernel = PB.BufferedVector{KernelDef}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, kernel)
        else
            PB.skip(d, wire_type)
        end
    end
    return KernelList(kernel[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::KernelList)
    initpos = position(e.io)
    !isempty(x.kernel) && PB.encode(e, 1, x.kernel)
    return position(e.io) - initpos
end
function PB._encoded_size(x::KernelList)
    encoded_size = 0
    !isempty(x.kernel) && (encoded_size += PB._encoded_size(x.kernel, 1))
    return encoded_size
end
