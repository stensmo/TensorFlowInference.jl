# Autogenerated using ProtoBuf.jl v1.0.15 on 2024-03-03T12:31:43.965
# original file: C:\Users\erst0014\Downloads\tensorflow-2.15.0\tensorflow-2.15.0\tensorflow\core\framework\dataset.proto (proto3 syntax)

import ProtoBuf as PB
using ProtoBuf: OneOf
using ProtoBuf.EnumX: @enumx

export CompressedComponentMetadata, UncompressedElement, CompressedElement

struct CompressedComponentMetadata
    dtype::tensorflow.var"#DataType".T
    tensor_shape::Union{Nothing,tensorflow.TensorShapeProto}
    uncompressed_bytes::Vector{UInt64}
end
PB.reserved_fields(::Type{CompressedComponentMetadata}) = (names = String[], numbers = Union{Int,UnitRange{Int}}[3])
PB.default_values(::Type{CompressedComponentMetadata}) = (;dtype = tensorflow.var"#DataType".DT_INVALID, tensor_shape = nothing, uncompressed_bytes = Vector{UInt64}())
PB.field_numbers(::Type{CompressedComponentMetadata}) = (;dtype = 1, tensor_shape = 2, uncompressed_bytes = 4)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:CompressedComponentMetadata})
    dtype = tensorflow.var"#DataType".DT_INVALID
    tensor_shape = Ref{Union{Nothing,tensorflow.TensorShapeProto}}(nothing)
    uncompressed_bytes = PB.BufferedVector{UInt64}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            dtype = PB.decode(d, tensorflow.var"#DataType".T)
        elseif field_number == 2
            PB.decode!(d, tensor_shape)
        elseif field_number == 4
            PB.decode!(d, wire_type, uncompressed_bytes)
        else
            PB.skip(d, wire_type)
        end
    end
    return CompressedComponentMetadata(dtype, tensor_shape[], uncompressed_bytes[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::CompressedComponentMetadata)
    initpos = position(e.io)
    x.dtype != tensorflow.var"#DataType".DT_INVALID && PB.encode(e, 1, x.dtype)
    !isnothing(x.tensor_shape) && PB.encode(e, 2, x.tensor_shape)
    !isempty(x.uncompressed_bytes) && PB.encode(e, 4, x.uncompressed_bytes)
    return position(e.io) - initpos
end
function PB._encoded_size(x::CompressedComponentMetadata)
    encoded_size = 0
    x.dtype != tensorflow.var"#DataType".DT_INVALID && (encoded_size += PB._encoded_size(x.dtype, 1))
    !isnothing(x.tensor_shape) && (encoded_size += PB._encoded_size(x.tensor_shape, 2))
    !isempty(x.uncompressed_bytes) && (encoded_size += PB._encoded_size(x.uncompressed_bytes, 4))
    return encoded_size
end

struct UncompressedElement
    components::Vector{tensorflow.TensorProto}
end
PB.default_values(::Type{UncompressedElement}) = (;components = Vector{tensorflow.TensorProto}())
PB.field_numbers(::Type{UncompressedElement}) = (;components = 1)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:UncompressedElement})
    components = PB.BufferedVector{tensorflow.TensorProto}()
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            PB.decode!(d, components)
        else
            PB.skip(d, wire_type)
        end
    end
    return UncompressedElement(components[])
end

function PB.encode(e::PB.AbstractProtoEncoder, x::UncompressedElement)
    initpos = position(e.io)
    !isempty(x.components) && PB.encode(e, 1, x.components)
    return position(e.io) - initpos
end
function PB._encoded_size(x::UncompressedElement)
    encoded_size = 0
    !isempty(x.components) && (encoded_size += PB._encoded_size(x.components, 1))
    return encoded_size
end

struct CompressedElement
    data::Vector{UInt8}
    component_metadata::Vector{CompressedComponentMetadata}
    version::Int32
end
PB.default_values(::Type{CompressedElement}) = (;data = UInt8[], component_metadata = Vector{CompressedComponentMetadata}(), version = zero(Int32))
PB.field_numbers(::Type{CompressedElement}) = (;data = 1, component_metadata = 2, version = 3)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:CompressedElement})
    data = UInt8[]
    component_metadata = PB.BufferedVector{CompressedComponentMetadata}()
    version = zero(Int32)
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            data = PB.decode(d, Vector{UInt8})
        elseif field_number == 2
            PB.decode!(d, component_metadata)
        elseif field_number == 3
            version = PB.decode(d, Int32)
        else
            PB.skip(d, wire_type)
        end
    end
    return CompressedElement(data, component_metadata[], version)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::CompressedElement)
    initpos = position(e.io)
    !isempty(x.data) && PB.encode(e, 1, x.data)
    !isempty(x.component_metadata) && PB.encode(e, 2, x.component_metadata)
    x.version != zero(Int32) && PB.encode(e, 3, x.version)
    return position(e.io) - initpos
end
function PB._encoded_size(x::CompressedElement)
    encoded_size = 0
    !isempty(x.data) && (encoded_size += PB._encoded_size(x.data, 1))
    !isempty(x.component_metadata) && (encoded_size += PB._encoded_size(x.component_metadata, 2))
    x.version != zero(Int32) && (encoded_size += PB._encoded_size(x.version, 3))
    return encoded_size
end
